#version 400
in vec3 Position;
in vec3 Normal;
in vec2 TexCoord;
in vec3 rotatedVertexPosition;

uniform sampler2D Texture;

uniform vec4 lightPos;
uniform vec4 cameraPos;
uniform vec3 ambientLight;
uniform vec3 diffuseLight;
uniform vec3 specularLight;
uniform float specularPower;

uniform float angleK;

void phongModel( vec3 norm, out vec3 ambAndDiff, out vec3 spec ) 
{
    vec3 lightDirection = lightPos.w == 0 ? normalize(vec3(lightPos)) : normalize(vec3(lightPos) - Position);
	vec3 cameraDirection =  cameraPos.w == 0 ? normalize(vec3(cameraPos)) : normalize(vec3(cameraPos) - Position);
    vec3 lightReflection = reflect( -lightDirection, norm );

    float sDotN = max( dot(lightDirection,norm), 0.0 );
	
    vec3 diffuse = diffuseLight * sDotN;
    ambAndDiff = ambientLight + diffuse;
	
    spec = vec3(0.0);
    if(sDotN > 0.0)
    {
        spec = specularLight * pow(max( dot(lightReflection, cameraDirection), 0.0 ), specularPower);
		// spec is NAN, if dot == 0 && specularPower <= 0
    }
}

void main() {

    vec3 ambAndDiff, spec;
	vec3 norm = normalize(Normal);	
	
	phongModel(norm, ambAndDiff, spec);

	vec4 texColor = texture2D(Texture, TexCoord).rgba;
		
	
	texColor.r = texColor.r * ambAndDiff.r + spec.r;
	texColor.g = texColor.g * ambAndDiff.g + spec.g;
	texColor.b = texColor.b * ambAndDiff.b + spec.b;

	float limitAngle = angleK*55.0 * 3.1415926535 / 180.0;
	
	float k = 5.0;

	if ((rotatedVertexPosition.z) < -0.02)
	{
	
		float tanAngle = atan(abs(rotatedVertexPosition.x) / (-rotatedVertexPosition.z));
		
		float x = (tanAngle-limitAngle) / limitAngle;
		
		texColor.a = 0.5 + 0.5*clamp(k*x, -1.0, 1.0);
			
	}
	else
	{
		texColor.a = 1.0;
	}
		
	
	gl_FragColor = texColor;
}