#version 400

in vec3 Position;
in vec3 Normal;
in vec2 TexCoord;

uniform sampler2D Texture;

uniform samplerCube Skybox;
uniform float reflectionRatio; // [0; 1], for cubemap

uniform vec4 lightPos;
uniform vec4 lightPos2;
uniform vec4 cameraPos;
uniform vec3 ambientLight;
uniform vec3 diffuseLight;
uniform vec3 specularLight;
uniform float specularPower;

uniform vec3 glassesColor;

void phongModel(vec3 cameraDirection, vec4 lightPos, vec3 norm, out vec3 ambAndDiff, out vec3 spec ) 
{
    vec3 lightDirection = lightPos.w == 0 ? normalize(vec3(lightPos)) : normalize(vec3(lightPos) - Position);
    vec3 lightReflection = reflect( -lightDirection, norm );

    float sDotN = max( dot(lightDirection,norm), 0.0 );
	
    vec3 diffuse = diffuseLight * sDotN;
    ambAndDiff = ambientLight + diffuse;
	
    spec = vec3(0.0);
    if(sDotN > 0.0)
    {
        spec = specularLight * pow(max( dot(lightReflection, cameraDirection), 0.0 ), specularPower);
		// spec is NAN, if dot == 0 && specularPower <= 0
    }
}

void main()
{
    vec3 ambAndDiff, spec;
	vec3 norm = normalize(Normal);	
	
	vec3 cameraDirection =  cameraPos.w == 0 ? normalize(vec3(cameraPos)) : normalize(vec3(cameraPos) - Position);
    vec3 cameraReflection = reflect(-cameraDirection, norm);
	
    vec4 textureColor = texture2D(Texture, TexCoord).rgba;
	
	float dist = distance(textureColor.rgb, glassesColor);	
	
	if (dist < 2 / 255.0)
	{
		vec4 reflectedColor = texture(Skybox, cameraReflection).rgba;
		
		textureColor.a = 0.5;
	
		textureColor = vec4(reflectionRatio * reflectedColor.a * reflectedColor.rgb + (1 - reflectionRatio) * textureColor.rgb, textureColor.a);
		
		phongModel(cameraDirection, lightPos2, norm, ambAndDiff, spec);
	}
	else
	{
		phongModel(cameraDirection, lightPos, norm, ambAndDiff, spec);
	}
	
	
	textureColor.r = textureColor.r * ambAndDiff.r + spec.r;
	textureColor.g = textureColor.g * ambAndDiff.g + spec.g;
	textureColor.b = textureColor.b * ambAndDiff.b + spec.b;
	
	gl_FragColor = textureColor;
	
}