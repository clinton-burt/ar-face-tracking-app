#version 400
in vec3 Position;
in vec3 Normal;
in vec3 Tangent;
in vec3 Bitangent;
in vec2 TexCoord;

uniform  vec4 lightPos;

uniform sampler2D Texture;
uniform sampler2D NormalMap;

uniform vec4 cameraPos;
uniform vec3 ambientLight;
uniform vec3 specularLight;



void main() {

    vec3 ambAndDiff, spec;
	

	mat3 TBN = transpose(mat3(
        normalize(Tangent),
        normalize(Bitangent),
        normalize(Normal)
    )); 
	
	vec3 cameraPosPos = TBN * cameraPos.xyz;

    vec3 EyeDirection_tangentspace =  TBN * cameraPosPos;	
	vec3 TextureNormal_tangentspace = normalize(texture( NormalMap, TexCoord ).rgb*2.0 - 1.0);
	
	vec3 norm = TextureNormal_tangentspace;

	vec3 s = TBN * normalize(vec3(lightPos) - Position);

    vec3 r = reflect( -s, norm );

    float sDotN = max( dot(s,norm), 0.0 );
    vec3 diffuse = vec3(0.65, 0.65, 0.65) * sDotN;
    spec = vec3(0.0);

    if( sDotN > 0.0 )
    {
        spec = specularLight*pow(max( dot(r, normalize(cameraPosPos)), 0.0 ), 80.0);
    }
    ambAndDiff = ambientLight + diffuse;
	
	
	vec4 texColor = vec4(texture2D(Texture, TexCoord).rgb, 1.0);
	
	texColor = vec4(ambAndDiff, 1.0)*texColor + vec4(spec, 1.0);

	gl_FragColor = texColor;

}