#version 400
in vec3 Position;
in vec3 Normal;
in vec2 TexCoord;
in vec3 rotatedVertexPosition;

uniform vec4 lightPos;
uniform vec4 materialColor;

uniform float angleK;

uniform vec4 cameraPos;
uniform vec3 specularLight;

void phongModel( vec3 position, vec3 norm, out vec3 ambAndDiff, out vec3 spec ) 
{
    vec3 s = normalize(vec3(lightPos) - position);
    vec3 v = normalize(-position.xyz);
    vec3 r = reflect( -s, norm );

    float sDotN = max( dot(s,norm), 0.0 );
    vec3 diffuse = materialColor.rgb * sDotN;
    spec = vec3(0.0);

    if( sDotN > 0.0 )
    {
		vec3 cameraPosPos = cameraPos.xyz;
        spec = specularLight*pow(max( dot(r, normalize(cameraPosPos)), 0.0 ), 20.0);
    }
	ambAndDiff = diffuse;
}

void main() {
    vec3 ambAndDiff, spec;
	vec3 nx = normalize(Normal);
	phongModel(Position, nx, ambAndDiff, spec);
	
	vec3 cameraPosPos = cameraPos.xyz;
    vec3 I = normalize(Position - cameraPosPos);
    vec3 R = reflect(I, nx);

	vec4 texColor;
	
	texColor.r = ambAndDiff.r + spec.r;
	texColor.g = ambAndDiff.g + spec.g;
	texColor.b = ambAndDiff.b + spec.b;
	
	float limitAngle = angleK*55.0 * 3.1415926535 / 180.0;
	
	float k = 5.0;

	if ((rotatedVertexPosition.z) < -0.02)
	{
	
		float tanAngle = atan(abs(rotatedVertexPosition.x) / (-rotatedVertexPosition.z));
		
		float x = (tanAngle-limitAngle) / limitAngle;
		
		texColor.a = 0.5 + 0.5*clamp(k*x, -1.0, 1.0);
			
	}
	else
	{
		texColor.a = 1.0;
	}
	
	
	
	gl_FragColor = texColor;
}