#version 400
in vec3 Position;
in vec3 Normal;
in vec2 TexCoord;
uniform sampler2D Texture;

uniform  vec4 lightPos;

uniform vec3 ambientLight;
uniform vec3 diffuseLight;
uniform vec3 specularLight;
uniform float specularPower;

void phongModel( vec3 position, vec3 norm, out vec3 ambAndDiff, out vec3 spec ) 
{
 vec3 s = normalize(vec3(lightPos) - position);
 vec3 v = normalize(-position.xyz);
 vec3 r = reflect( -s, norm );
 vec3 ambient = ambientLight;
 float sDotN = max( dot(s,norm), 0.0 );
 vec3 diffuse = diffuseLight * sDotN;
 spec = vec3(0.0);
 if( sDotN > 0.0 )
 spec = specularLight * pow( max( dot(r,v), 0.0 ), specularPower );
 ambAndDiff = ambient + diffuse;

}

void main() {
 vec3 ambAndDiff, spec;
 vec4 texColor = texture( Texture, TexCoord );
 phongModel(Position, Normal, ambAndDiff, spec);
 gl_FragColor = vec4(ambAndDiff, 1.0) * texColor + vec4(spec, 1.0);
}